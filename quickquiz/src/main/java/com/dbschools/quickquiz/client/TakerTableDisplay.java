/*
 * QuickQuiz
 * Copyright (C) 2005 David C. Briccetti
 * www.davebsoft.com
 *
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software Foundation, 
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package com.dbschools.quickquiz.client;

import java.awt.Dimension;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.swing.DefaultListSelectionModel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.TableColumn;

import com.dbschools.gui.ErrorHandler;
import com.dbschools.gui.LongTextTableCellRenderer;
import com.dbschools.gui.TableSorter;
import com.dbschools.gui.TableUtil;
import com.dbschools.quickquiz.QuizTaker;

/**
 * Displays a table of quiz takers.
 * <p>
 * This class was generated by IBM VisualAge for Java. This code could be replaced or
 * updated.
 * 
 * @author David C. Briccetti
 */
public class TakerTableDisplay extends JPanel implements Comparator<QuizTaker> {
    private static final long serialVersionUID = -4903747211611318891L;
    private TableSorter tableSorter; 
    private JScrollPane scrollPane;
    private JTable table;
    private final TakerTableModel takerTableModel = new TakerTableModel();
    private TableColumn nameColumn;
    private TableColumn hostnameColumn;
    private TableColumn lastResponseColumn;
    private TableColumn scoreColumn;
    private TableColumn lastResponseReceivedColumn;
    private final List<QuizTaker> takers = Collections.synchronizedList(new ArrayList<QuizTaker>());
    private final TableStyle tableStyle;
    
    public enum TableStyle {
        GIVER, TAKER
    }
    
    /**
     * TakerTableDisplay constructor comment.
     */
    public TakerTableDisplay(TableStyle tableStyle) {
        super();
        this.tableStyle = tableStyle;
        initialize();
    }

    /**
     * Return the JScrollPane1 property value.
     * 
     * @return javax.swing.JScrollPane
     */
    private javax.swing.JScrollPane getJScrollPane1() {
        if (scrollPane == null) {
            try {
                scrollPane = new javax.swing.JScrollPane();
                scrollPane.setName("JScrollPane1");
                scrollPane
                        .setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
                scrollPane
                        .setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                getJScrollPane1().setViewportView(getScrollPaneTable());
            } catch (java.lang.Throwable ivjExc) {
                ErrorHandler.handleException(ivjExc);
            }
        }
        return scrollPane;
    }

    private javax.swing.table.TableColumn getLastResponseColumn() {
        if (lastResponseColumn == null) {
            try {
                lastResponseColumn = new javax.swing.table.TableColumn();
                lastResponseColumn.setModelIndex(2);
                lastResponseColumn.setMinWidth(30);
                lastResponseColumn.setPreferredWidth(300);
                lastResponseColumn.setHeaderValue("Last Response");
                lastResponseColumn.setResizable(true);
                lastResponseColumn
                        .setCellRenderer(new LongTextTableCellRenderer());
            } catch (java.lang.Throwable ivjExc) {
                ErrorHandler.handleException(ivjExc);
            }
        }
        return lastResponseColumn;
    }

    private javax.swing.table.TableColumn getLastResponseReceivedColumn() {
        if (lastResponseReceivedColumn == null) {
            try {
                lastResponseReceivedColumn = new javax.swing.table.TableColumn();
                lastResponseReceivedColumn.setModelIndex(3);
                lastResponseReceivedColumn.setPreferredWidth(90);
                lastResponseReceivedColumn.setMaxWidth(90);
                lastResponseReceivedColumn.setHeaderValue("Last Activity");
            } catch (java.lang.Throwable ivjExc) {
                ErrorHandler.handleException(ivjExc);
            }
        }
        return lastResponseReceivedColumn;
    }

    private javax.swing.table.TableColumn getNameColumn() {
        if (nameColumn == null) {
            try {
                nameColumn = new javax.swing.table.TableColumn();
                nameColumn.setMinWidth(30);
                nameColumn.setPreferredWidth(200);
                nameColumn.setHeaderValue("Name");
            } catch (java.lang.Throwable ivjExc) {
                ErrorHandler.handleException(ivjExc);
            }
        }
        return nameColumn;
    }

    private TableColumn getHostnameColumn() {
        if (hostnameColumn == null) {
            try {
                hostnameColumn = new TableColumn();
                hostnameColumn.setPreferredWidth(110);
                hostnameColumn.setMaxWidth(110);
                hostnameColumn.setModelIndex(4);
                hostnameColumn.setHeaderValue("Host");
            } catch (java.lang.Throwable ivjExc) {
                ErrorHandler.handleException(ivjExc);
            }
        }
        return hostnameColumn;
    }

    private javax.swing.table.TableColumn getScoreColumn() {
        if (scoreColumn == null) {
            try {
                scoreColumn = new javax.swing.table.TableColumn();
                scoreColumn.setModelIndex(1);
                scoreColumn.setPreferredWidth(75);
                scoreColumn.setMaxWidth(45);
                scoreColumn.setHeaderValue("Score");
            } catch (java.lang.Throwable ivjExc) {
                ErrorHandler.handleException(ivjExc);
            }
        }
        return scoreColumn;
    }

    private javax.swing.JTable getScrollPaneTable() {
        if (table == null) {
            try {
                table = new javax.swing.JTable();
                table.setName("ScrollPaneTable");
                getJScrollPane1().setColumnHeaderView(
                        table.getTableHeader());
                table.setAutoCreateColumnsFromModel(false);
                table.addColumn(getNameColumn());
                table.addColumn(getScoreColumn());
                table.addColumn(getLastResponseReceivedColumn());
                getLastResponseReceivedColumn().setCellRenderer(
                        new DateTableCellRenderer());
                if (tableStyle == TableStyle.GIVER) {
                    table.addColumn(getLastResponseColumn());
                    table.addColumn(getHostnameColumn());
                }
            } catch (java.lang.Throwable ivjExc) {
                ErrorHandler.handleException(ivjExc);
            }
        }
        return table;
    }
    
    public void addTableKeyListener(KeyListener keyListener) {
        table.addKeyListener(keyListener);
    }

    /**
     * Initialize the class.
     */
    private void initialize() {
        try {
            setName("TakerTableDisplay");
            setLayout(new java.awt.BorderLayout());
            setMinimumSize(new Dimension(100, 50));
            setPreferredSize(new Dimension(391, 200));
            add(getJScrollPane1(), "Center");
            tableSorter = TableUtil.setUpSortingTable(getScrollPaneTable(), 
                    takerTableModel);
            getScrollPaneTable().setSelectionModel(
                    new DefaultListSelectionModel());
        } catch (java.lang.Throwable ivjExc) {
            ErrorHandler.handleException(ivjExc);
        }
    }

    /**
     * Returns the table's selection model.
     * @return selection model
     */
    public ListSelectionModel getSelectionModel() {
        return table.getSelectionModel();
    }

    /**
     * Returns the indexes of selected model rows, taking sorting into account.
     * @return an array of integers containing the indexes of all selected 
     * rows, or an empty array if no row is selected
     */
    public final int[] getSelectedRows() {
        int[] selectedViewRows = table.getSelectedRows();
        int[] selectedModelRows = new int[selectedViewRows.length];
        for (int i = 0; i < selectedViewRows.length; ++i) {
            selectedModelRows[i] = tableSorter.modelIndex(selectedViewRows[i]);
        }
        return selectedModelRows;
    }

    /**
     * Sets the list of takers.
     * @param takers
     */
    public final void setTakers(final Collection<QuizTaker> takers) {
        final List<String> selectedTakerNames = saveSelectedTakerNames();
        synchronized(this.takers) {
            this.takers.clear();
            this.takers.addAll(takers);
        }
        takerTableModel.setTakers(this.takers);
        restoreTakerSelections(selectedTakerNames);
        
    }

    private void restoreTakerSelections(List<String> selectedTakerNames) {
        final int numRows = tableSorter.getRowCount();
        final ListSelectionModel selectionModel = table.getSelectionModel();
        selectionModel.clearSelection();
        for (int i = 0; i < numRows; ++i) {
            final String takerName = (String) tableSorter.getValueAt(i, 0);
            if (selectedTakerNames.contains(takerName)) {
                selectionModel.addSelectionInterval(i, i);
            }
        }
    }

    private List<String> saveSelectedTakerNames() {
        List<String> selectedTakerNames = new ArrayList<String>();
        int[] selectedRows = table.getSelectedRows();
        for (int selectedRow : selectedRows) {
            selectedTakerNames.add((String) tableSorter.getValueAt(selectedRow, 0));
        }
        return selectedTakerNames;
    }

    public final List<?> getTakers() {
        return takers;
    }

    private static Date adjustDateToSortNonRespondersToBottom(
            final QuizTaker player) {
        final Date adjustedDate = player.getLastResponseReceivedAt();
        if (player.getLastResponse().trim().equals("")) {
            adjustedDate.setYear(3000);
        }
        return adjustedDate;
    }

    public int compare(QuizTaker o1, QuizTaker o2) {
        return adjustDateToSortNonRespondersToBottom(o1).compareTo(
                adjustDateToSortNonRespondersToBottom(o2));
    }
}