package com.dbschools.picker;

import java.util.logging.Logger;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Synthesizer;
import javax.sound.midi.MidiChannel;
import javax.sound.midi.MidiUnavailableException;
import javax.swing.*;
import java.util.List;
import java.util.Collections;
import java.util.ArrayList;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * Main panel for Name Picker application.
 */
public class Panel extends javax.swing.JPanel {
    private static Logger log = Logger.getLogger(Panel.class.getName());
    private final PickerListModel model = new PickerListModel();
    private JFrame appFrame;
    private NamesDialog namesDialog;
    private MidiChannel channel;
    private boolean fanfare;
    /** Helper object which drives the picking */
    private final Picker picker = new Picker();
    /** The current working “picking hat” of names—shrinks by one after each pick */
    private final List<String> pickingHat = new ArrayList<String>();

    public Panel() {
        try {
            final Synthesizer synthesizer = MidiSystem.getSynthesizer();
            synthesizer.open();
            channel = synthesizer.getChannels()[9];
        } catch (MidiUnavailableException ex) {
            System.out.println(ex);
        }
        initComponents();
        jScrollPane1.setPreferredSize(new Dimension(600, 550));
        namesJList.setModel(model);

        picker.addListener(new ItemSelectedListener());
    }

    public void setAppFrame(JFrame appFrame) {
        this.appFrame = appFrame;
        namesDialog = new NamesDialog(appFrame, true);
    }    
    
    void setMaxPicks(int maxPicks) {
        namesDialog.setMaxPicks(maxPicks);
    }
    
    void setNames(List<String> names) {
        namesDialog.setNames(names);
        addNamesToPickingHat();
    }

    void begin() {
        preparePickingHat();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabelSelected = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        namesJList = new javax.swing.JList();
        jPanelButtons = new javax.swing.JPanel();
        jButtonHelp = new javax.swing.JButton();
        jButtonNames = new javax.swing.JButton();
        jButtonPick = new javax.swing.JButton();
        fanfareCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        jLabelSelected.setFont(new java.awt.Font("Serif", 1, 72)); // NOI18N
        jLabelSelected.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSelected.setText(" ");
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/dbschools/picker/strings"); // NOI18N
        jLabelSelected.setToolTipText(bundle.getString("helpSelected")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 4, 8, 4);
        add(jLabelSelected, gridBagConstraints);

        jScrollPane1.setToolTipText(bundle.getString("namesListHelp")); // NOI18N

        namesJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(namesJList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jButtonHelp.setMnemonic('h');
        jButtonHelp.setText(bundle.getString("helpButton")); // NOI18N
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });
        jPanelButtons.add(jButtonHelp);

        jButtonNames.setMnemonic('n');
        jButtonNames.setText(bundle.getString("names")); // NOI18N
        jButtonNames.setToolTipText(bundle.getString("namesHelp")); // NOI18N
        jButtonNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNamesActionPerformed(evt);
            }
        });
        jPanelButtons.add(jButtonNames);

        jButtonPick.setMnemonic('p');
        jButtonPick.setText(bundle.getString("pick")); // NOI18N
        jButtonPick.setToolTipText(bundle.getString("pickHelp")); // NOI18N
        jButtonPick.setEnabled(false);
        jButtonPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPickActionPerformed(evt);
            }
        });
        jPanelButtons.add(jButtonPick);

        fanfareCheckBox.setMnemonic('f');
        fanfareCheckBox.setSelected(true);
        fanfareCheckBox.setText("Fanfare");
        jPanelButtons.add(fanfareCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanelButtons, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
        // Add your handling code here:
        JOptionPane.showMessageDialog(this.appFrame, 
            java.util.ResourceBundle.getBundle("com/dbschools/picker/strings").getString("helpText"));
    }//GEN-LAST:event_jButtonHelpActionPerformed

    private void jButtonNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNamesActionPerformed
        jLabelSelected.setText(" ");

        namesDialog.setVisible(true);
        setMaxPicks(namesDialog.getMaxPicks());
        addNamesToPickingHat();
        preparePickingHat();
    }//GEN-LAST:event_jButtonNamesActionPerformed

    private void jButtonPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPickActionPerformed
        fanfare = fanfareCheckBox.isSelected();
        if (pickingHat.isEmpty()) { // Button is showing "Reset"
            addNamesToPickingHat();
            preparePickingHat();
            return;
        }
        
        pickWithOptionalFanfare();
        
    }//GEN-LAST:event_jButtonPickActionPerformed

    /**
     * Shuffles multiple times and calls @{link #pick}.
     */
    private class ShuffleAndPickListener implements ActionListener {
        private static final long SHUFFLE_DURATION_MS = 100;
        private Timer timer;
        private final long startingTime = System.currentTimeMillis();

        public void setTimer(Timer timer) {
            this.timer = timer;
        }

        public void actionPerformed(ActionEvent actionEvent) {
            if (System.currentTimeMillis() < startingTime + SHUFFLE_DURATION_MS) {
                shufflePickingHat();
            } else {
                timer.stop();
                pick();
            }
        }
    }

    /**
     * Shows the result of the picking in the user interface.
     */
    private class ItemSelectedListener implements Listener {
        public void itemSelected(final int itemIndex, boolean isFinal) {
            final ListSelectionModel sm = namesJList.getSelectionModel();
            final int midiNote = 75;

            channel.noteOff(midiNote);
            channel.noteOn(midiNote, 127);
            sm.setSelectionInterval(itemIndex, itemIndex);
            jLabelSelected.setText(pickingHat.get(itemIndex));
            
            if (isFinal) {
                // Wait a moment, and then remove the picked name from the list
                new SwingWorker() {
                    @Override
                    protected Object doInBackground() throws Exception {
                        Thread.sleep(500);
                        return null;
                    }

                    @Override
                    protected void done() {
                        pickingHat.remove(itemIndex);
                        model.fireItemRemoved(itemIndex);
                        if (pickingHat.isEmpty()) {
                            jButtonPick.setText("Reset");
                        }
                    }
                }.execute();
            }
        }
    }

    private void pickWithOptionalFanfare() {
        if (fanfare) {
            final ShuffleAndPickListener spl = new ShuffleAndPickListener();
            final Timer timer = new Timer(20, spl);
            spl.setTimer(timer);
            timer.start();
        } else {
            shufflePickingHat();
            pick();
        }
    }

    private void pick() {
        picker.setNames(pickingHat);
        picker.setFanfare(fanfare);
        picker.pick();
    }

    private void preparePickingHat() {
        jButtonPick.setText("Pick");
        jLabelSelected.setText(" ");
        if (! pickingHat.isEmpty()) {
            model.fireContentsChanged();
            jButtonPick.setEnabled(true);
        }
    }

    private void shufflePickingHat() {
        Collections.shuffle(pickingHat);
        model.fireContentsChanged();
    }

    private void addNamesToPickingHat() {
        pickingHat.clear();
        final List<String> names = namesDialog.getNames();
        for (int i = 0; i < namesDialog.getMaxPicks(); ++i) {
            pickingHat.addAll(names);
        }
        model.fireContentsChanged();
    }

    private class PickerListModel extends AbstractListModel {
        public int getSize() {
            return pickingHat.size();
        }

        public Object getElementAt(int rowIndex) {
            return pickingHat.get(rowIndex);
        }

        public void fireItemRemoved(int i) {
            super.fireIntervalRemoved(this, i, i);
        }

        protected void fireContentsChanged() {
            super.fireContentsChanged(this, 0, pickingHat.size());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox fanfareCheckBox;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonNames;
    private javax.swing.JButton jButtonPick;
    private javax.swing.JLabel jLabelSelected;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList namesJList;
    // End of variables declaration//GEN-END:variables
}
