package com.dbschools.picker;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;

import com.dbschools.gui.JwsClipboardUtil;

/**
 * Dialog for collecting names to be chosen.
 */
public class NamesDialog extends javax.swing.JDialog {

    private final NamesManager namesManager = new NamesManager();
    private final List<String> names = new ArrayList<String>();
    private JTabbedPane tabbedPane;

    public NamesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        maxPicksSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jButtonOK = new javax.swing.JButton();
        namesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaNames = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuEditPaste = new javax.swing.JMenuItem();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/dbschools/picker/strings"); // NOI18N
        setTitle(bundle.getString("namesTitle")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel2.setText(bundle.getString("namesInstructions")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel1.setText(bundle.getString("maxTimesEach")); // NOI18N
        jPanel1.add(jLabel1);

        maxPicksSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(1), null, Integer.valueOf(1)));
        jPanel1.add(maxPicksSpinner);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 0);
        getContentPane().add(jPanel1, gridBagConstraints);

        jButtonOK.setMnemonic('o');
        jButtonOK.setText(bundle.getString("ok")); // NOI18N
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonOK);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(jPanel2, gridBagConstraints);

        namesPanel.setPreferredSize(new java.awt.Dimension(300, 400));
        namesPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jTextAreaNames);

        namesPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(namesPanel, gridBagConstraints);

        menuFile.setMnemonic('f');
        menuFile.setText(bundle.getString("file")); // NOI18N

        openMenu.setMnemonic('o');
        openMenu.setText(bundle.getString("open")); // NOI18N
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        menuFile.add(openMenu);

        jMenuBar1.add(menuFile);

        menuEdit.setMnemonic('e');
        menuEdit.setText(bundle.getString("edit")); // NOI18N

        menuEditPaste.setText(bundle.getString("paste")); // NOI18N
        menuEditPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditPasteActionPerformed(evt);
            }
        });
        menuEdit.add(menuEditPaste);

        jMenuBar1.add(menuEdit);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        namesManager.getFileContentsWithJnlp();

        if (namesManager.hasContents()) {
            if (! namesManager.sections().isEmpty()) {
                
                // Remove the simple display
                namesPanel.remove(jScrollPane1);
                // And put in the tabbed pane
                tabbedPane = new JTabbedPane();
                namesPanel.add(tabbedPane, BorderLayout.CENTER);

                addTabs(namesManager.sections());
            } else {
                jTextAreaNames.setText(namesManager.fileContents());
            }
        }
    }//GEN-LAST:event_openMenuActionPerformed


    /**
     * Adds a tab for each of the sections 
     */
    private void addTabs(List<NamesManager.Section> sections) {
        for (final NamesManager.Section section : sections) {
            // Add a new tab containing a JScrollPane with a 
            // JTextArea in it containing the names for this section
            tabbedPane.addTab(section.title(), new JScrollPane(
                    new JTextArea(section.data())));
        }
    }

	private void menuEditPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditPasteActionPerformed
        try {
            jTextAreaNames.setText(JwsClipboardUtil.getStringFromJwsOrSystemClipboard());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_menuEditPasteActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        final String text;
    	if (namesManager.sections().isEmpty())
    		text = jTextAreaNames.getText();
    	else {
    		text = namesManager.sections().get(tabbedPane.getSelectedIndex()).data();
    	}
        names.clear();
        if (text.trim().length() > 0) {
            for (String name : text.split("\n")) {
                if (name.trim().length() > 0) {
                    names.add(name);
                }
            }
        }
        setVisible(false);
    }//GEN-LAST:event_jButtonOKActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
    }//GEN-LAST:event_closeDialog
    
    public int getMaxPicks() {
        return (Integer) maxPicksSpinner.getValue();
    }

    public void setMaxPicks(int maxPicks) {
        maxPicksSpinner.setValue(maxPicks);
    }

    public List<String> getNames() {
        return Collections.unmodifiableList(names);
    }

    public void setNames(List<String> names) {
        this.names.clear();
        this.names.addAll(names);
        StringBuilder sb = new StringBuilder();
        final String lineSep = System.getProperty("line.separator");
        for (String n : names) {
            sb.append(n).append(lineSep);
        }
        jTextAreaNames.setText(sb.toString());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaNames;
    private javax.swing.JSpinner maxPicksSpinner;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenuItem menuEditPaste;
    private javax.swing.JMenu menuFile;
    private javax.swing.JPanel namesPanel;
    private javax.swing.JMenuItem openMenu;
    // End of variables declaration//GEN-END:variables

}
