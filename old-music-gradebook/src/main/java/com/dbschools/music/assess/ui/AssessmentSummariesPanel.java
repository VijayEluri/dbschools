/*
 * DBSchools
 * Copyright (C) 2005 David C. Briccetti
 * www.davebsoft.com
 *
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software Foundation, 
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package com.dbschools.music.assess.ui;

import com.dbschools.music.ui.StudentSelectorDialog;
import com.dbschools.music.dao.RemoteDao;
import com.dbschools.picker.App;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

import org.apache.log4j.Logger;

import com.dbschools.gui.PopupListener;
import com.dbschools.gui.TableSorter;
import com.dbschools.gui.TableUtil;
import com.dbschools.music.Utils;
import com.dbschools.music.orm.Musician;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.List;

/**
 * Assessment summaries panel.
 */
public final class AssessmentSummariesPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = -2104259848384831535L;
    private final static Logger log = Logger
            .getLogger(AssessmentSummariesPanel.class);
    private final SummaryTableModel summaryTableModel;
    private final TableSorter sortedModel;
    private final StudentDetailsLauncher historyWindowLauncher;
    private final StudentSelectorDialog studentSelectorDialog;
    
    public AssessmentSummariesPanel(RemoteDao remoteDao, int schoolYear) {
        studentSelectorDialog = new StudentSelectorDialog(
                Utils.getDialogParent(this), remoteDao, true);
        historyWindowLauncher = new StudentDetailsLauncher(remoteDao);
        initComponents();
        summaryTableModel = new SummaryTableModel(remoteDao, schoolYear);
        sortedModel = TableUtil.setUpSortingTable(summariesTable, summaryTableModel);
        SummaryTableCustomizer.customize(summariesTable);
        summariesTable.addMouseListener(new PopupListener(summariesTable, getPopupMenu()));
        Utils.buildShowingLabelValue(studentSelectorDialog, nowShowingLabel);
    }

    private void openSelectedStudents() {
        processSelectedStudents(new DoForMusician() {
            public void doFor(Musician musician) {
                historyWindowLauncher.launch(musician);
            }
        });
    }

    private JPopupMenu getPopupMenu() {
        final JPopupMenu menu = new JPopupMenu();
        JMenuItem mi = new JMenuItem("Open");
        mi.addActionListener(new ActionListener() {
            public final void actionPerformed(ActionEvent e) {
                openSelectedStudents();
            }
        });
        menu.add(mi);
        mi = new JMenuItem("Randomly Choose...");
        mi.addActionListener(new ActionListener() {
            public final void actionPerformed(ActionEvent e) {
                final List<String> names = new ArrayList<String>();
                processSelectedStudents(new DoForMusician() {
                    public void doFor(Musician musician) {
                        names.add(musician.getName());
                    }
                });
                App picker = new App();
                picker.setMaxPicks(1);
                picker.setNames(names);
                picker.begin();
                picker.setVisible(true);
            }
        });
        menu.add(mi);
        return menu;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        summariesTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        showButton = new javax.swing.JButton();
        nowShowingLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 550));

        summariesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        summariesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                summariesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(summariesTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        showButton.setText("Show...");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });
        jPanel1.add(showButton);

        nowShowingLabel.setText("Now showing");
        jPanel1.add(nowShowingLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void summariesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_summariesTableMouseClicked
        if (evt.getClickCount() == 2) {
            openSelectedStudents();
        }
    }//GEN-LAST:event_summariesTableMouseClicked

    private void showButtonActionPerformed(@SuppressWarnings("unused") java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        selectStudents();
    }//GEN-LAST:event_showButtonActionPerformed

    private void selectStudents() {
    	setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (Utils.processStudentSelectorDialog(studentSelectorDialog, summaryTableModel)) {
            Utils.buildShowingLabelValue(studentSelectorDialog, nowShowingLabel);
            summaryTableModel.refresh();
        }
    	setCursor(Cursor.getDefaultCursor());
    }

    private interface DoForMusician {
        void doFor(Musician musician);
    }
    
    private void processSelectedStudents(DoForMusician doForMusician) {
        final int[] selectedRows = summariesTable.getSelectedRows();
        
        for (int selectedRow : selectedRows) {
            final int modelIndex = sortedModel.modelIndex(selectedRow);
            final Musician musician = summaryTableModel.getMusicianAt(modelIndex);
            doForMusician.doFor(musician);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nowShowingLabel;
    private javax.swing.JButton showButton;
    private javax.swing.JTable summariesTable;
    // End of variables declaration//GEN-END:variables

}
